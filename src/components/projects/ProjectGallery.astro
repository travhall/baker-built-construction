---
import ProjectGrid from "@/components/projects/ProjectGrid.astro";
import type { Project } from "@/types/project";

interface Props {
  projects: Project[];
}

const { projects } = Astro.props;

// Get unique categories from all projects with proper typing
const categories = Array.from(
  new Set(
    projects.flatMap((project: Project) =>
      project.categories.map((cat) => cat.name)
    )
  )
).sort();
---

<div class="space-y-8">
  <!-- <div
    class="flex flex-col sm:flex-row gap-4 justify-between items-start sm:items-center"
  >
    <div class="flex flex-wrap gap-4">
      <select
        id="category-filter"
        class="px-4 py-2 border rounded-md bg-background text-foreground border-input focus:outline-none focus:ring-2 focus:ring-ring"
      >
        <option value="">All Categories</option>
        {
          categories.map((category: string) => (
            <option value={category}>{category}</option>
          ))
        }
      </select>

      <select
        id="sort-order"
        class="px-4 py-2 border rounded-md bg-background text-foreground border-input focus:outline-none focus:ring-2 focus:ring-ring"
      >
        <option value="desc">Newest First</option>
        <option value="asc">Oldest First</option>
      </select>
    </div>

    <button
      id="clear-filters"
      class="px-4 py-2 text-sm text-muted-foreground hover:text-foreground transition-colors"
    >
      Clear Filters
    </button>
  </div> -->

  <div id="project-grid" data-projects={JSON.stringify(projects)}>
    <ProjectGrid projects={projects} selectedCategory="" sortOrder="desc" />
  </div>
</div>

<script>
  import type { Project } from "@/types/project";

  class ProjectGalleryManager {
    private gridElement: HTMLElement;
    private categoryFilter: HTMLSelectElement;
    private sortOrder: HTMLSelectElement;
    private projects: Project[];

    constructor() {
      this.gridElement = document.getElementById("project-grid")!;
      this.categoryFilter = document.getElementById(
        "category-filter"
      ) as HTMLSelectElement;
      this.sortOrder = document.getElementById(
        "sort-order"
      ) as HTMLSelectElement;

      const projectsData = this.gridElement.dataset.projects;
      this.projects = projectsData
        ? (JSON.parse(projectsData) as Project[])
        : [];

      this.initializeEventListeners();
    }

    private initializeEventListeners(): void {
      this.categoryFilter?.addEventListener("change", () => this.updateGrid());
      this.sortOrder?.addEventListener("change", () => this.updateGrid());

      document
        .getElementById("clear-filters")
        ?.addEventListener("click", () => {
          if (this.categoryFilter) this.categoryFilter.value = "";
          if (this.sortOrder) this.sortOrder.value = "desc";
          this.updateGrid();
        });
    }

    private updateGrid(): void {
      const filteredProjects = this.getFilteredProjects();
      this.renderProjects(filteredProjects);
    }

    private getFilteredProjects(): Project[] {
      let filtered = [...this.projects];

      const category = this.categoryFilter?.value;
      if (category) {
        filtered = filtered.filter((project) =>
          project.categories.some((cat) => cat.name === category)
        );
      }

      const sortOrder = this.sortOrder?.value as "asc" | "desc";
      filtered.sort((a, b) => {
        const dateA = new Date(a.date).getTime();
        const dateB = new Date(b.date).getTime();
        return sortOrder === "desc" ? dateB - dateA : dateA - dateB;
      });

      return filtered;
    }

    private renderProjects(projects: Project[]): void {
      const event = new CustomEvent("updateProjects", {
        detail: {
          projects,
          category: this.categoryFilter?.value || "",
          sort: this.sortOrder?.value || "desc",
        },
      });
      this.gridElement.dispatchEvent(event);
    }
  }

  // Initialize the manager when the DOM is ready
  new ProjectGalleryManager();
</script>
