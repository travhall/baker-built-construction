---
// @/components/common/Navigation.astro
import ThemeToggle from "./ThemeToggle.astro";
import { pages } from "@/content/config";
---

<nav
  class="relative z-50 bg-background text-foreground"
  aria-label="Main Navigation"
>
  <!-- Mobile Menu Button -->
  <button
    id="menu-toggle"
    type="button"
    class="md:hidden fixed top-4 right-4 z-50 p-2 rounded-lg bg-background text-foreground shadow-lg focus:outline-none focus:ring-2 focus:ring-ring"
    aria-controls="mobile-menu"
    aria-expanded="false"
    aria-label="Toggle navigation menu"
    data-menu-button
  >
    <svg
      class="w-6 h-6"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <line
        x1="3"
        y1="12"
        x2="21"
        y2="12"
        class="transition-transform origin-center"></line>
      <line
        x1="3"
        y1="6"
        x2="21"
        y2="6"
        class="transition-transform origin-center"></line>
      <line
        x1="3"
        y1="18"
        x2="21"
        y2="18"
        class="transition-transform origin-center"></line>
    </svg>
  </button>

  <!-- Mobile Menu -->
  <div
    id="mobile-menu"
    class="md:hidden fixed inset-y-0 right-0 w-64 bg-background text-foreground shadow-lg transform translate-x-full transition-transform duration-300 ease-in-out overflow-y-auto"
    role="dialog"
    aria-modal="true"
    aria-label="Navigation menu"
    data-menu
  >
    <ul class="p-4 space-y-4">
      {
        pages.map((page) => (
          <li>
            <a
              href={page.path}
              class="block w-full p-2 text-lg hover:bg-accent hover:text-accent-foreground rounded-lg transition duration-200 focus:outline-none focus:ring-2 focus:ring-ring"
            >
              {page.name}
            </a>
          </li>
        ))
      }
    </ul>
  </div>

  <!-- Desktop Menu -->
  <ul class="hidden md:flex space-x-8 p-4 items-center justify-center">
    {
      pages.map((page) => (
        <li>
          <a
            href={page.path}
            class="text-foreground hover:text-primary transition duration-200 focus:outline-none focus:ring-2 focus:ring-ring rounded-lg px-2 py-1"
          >
            {page.name}
          </a>
        </li>
      ))
    }
    <li>
      <ThemeToggle />
    </li>
  </ul>
</nav>

<script>
  // Initialize menu functionality
  function initMenu() {
    const menuToggle = document.getElementById(
      "menuToggle"
    ) as HTMLButtonElement | null;
    const mobileMenu = document.getElementById(
      "mobileMenu"
    ) as HTMLElement | null;
    const closeMenu = document.getElementById(
      "closeMenu"
    ) as HTMLButtonElement | null;
    const menuIcon = document.getElementById(
      "menuIcon"
    ) as SVGPathElement | null;

    // Ensure all elements are found before proceeding
    if (!menuToggle || !mobileMenu || !closeMenu || !menuIcon) {
      console.error("Essential menu elements not found.");
      return; // Exit if essential elements are missing
    }

    const toggleMenu = (isOpen: boolean) => {
      mobileMenu.classList.toggle("translate-x-full", !isOpen);
      menuToggle.setAttribute("aria-expanded", isOpen.toString());
      mobileMenu.setAttribute("aria-hidden", (!isOpen).toString());
      menuIcon.setAttribute(
        "d",
        isOpen ? "M4 6h16M4 12h16m-7 6h7" : "M6 18L18 6M6 6l12 12"
      );
    };

    // Example event listener setup
    menuToggle.addEventListener("click", () => {
      const isOpen = mobileMenu.classList.contains("translate-x-full");
      toggleMenu(isOpen);
    });

    // Close menu when clicking outside
    document.addEventListener("click", (e) => {
      if (!(e.target instanceof Node)) return;

      const isMenuOpen = menuToggle.getAttribute("aria-expanded") === "true";
      if (
        isMenuOpen &&
        !mobileMenu.contains(e.target) &&
        !menuToggle.contains(e.target)
      ) {
        toggleMenu(false);
      }
    });

    // Close menu on escape key
    document.addEventListener("keydown", (e) => {
      if (
        e.key === "Escape" &&
        menuToggle.getAttribute("aria-expanded") === "true"
      ) {
        toggleMenu(false);
      }
    });
  }

  // Run initialization when the DOM is ready
  document.addEventListener("astro:page-load", initMenu);
  // Also run on initial load for non-View Transitions cases
  initMenu();
</script>
