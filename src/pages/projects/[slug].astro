---
import ProjectLayout from "../../layouts/ProjectLayout.astro";
import { client } from "../../../.tina/__generated__/client";

export async function getStaticPaths() {
  try {
    const tinaResponse = await client.queries.projectConnection({
      sort: "date",
      last: 100,
    });

    if (!tinaResponse.data.projectConnection.edges) {
      throw new Error("No projects found");
    }

    const projects = tinaResponse.data.projectConnection.edges || [];

    return projects
      .map((edge, index) => {
        const currentProject = edge?.node;
        if (!currentProject) return null;

        const prevProject = projects[index + 1]?.node;
        const nextProject = projects[index - 1]?.node;

        return {
          params: { slug: currentProject._sys.filename },
          props: {
            project: {
              title: currentProject.title,
              date: new Date(currentProject.date),
              description: currentProject.description || "",
              categories:
                currentProject.categories?.map((cat) => ({
                  name: cat?.name || "",
                })) || [],
              images:
                currentProject.images?.map((img) => ({
                  src: img?.src || "",
                  caption: img?.caption || "",
                  featured: img?.featured || false,
                })) || [],
            },
            prevProject: prevProject?.title
              ? {
                  title: prevProject.title,
                  slug: prevProject._sys.filename,
                }
              : undefined,
            nextProject: nextProject?.title
              ? {
                  title: nextProject.title,
                  slug: nextProject._sys.filename,
                }
              : undefined,
          },
        };
      })
      .filter((path): path is NonNullable<typeof path> => path !== null);
  } catch (error) {
    console.error("Error fetching projects:", error);
    return [];
  }
}

const { project, prevProject, nextProject } = Astro.props;

if (!project) {
  return new Response(null, { status: 404, statusText: "Not found" });
}
---

<ProjectLayout
  project={project}
  prevProject={prevProject}
  nextProject={nextProject}
/>
